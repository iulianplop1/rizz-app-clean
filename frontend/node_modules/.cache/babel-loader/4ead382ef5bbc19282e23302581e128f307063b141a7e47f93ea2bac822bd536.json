{"ast":null,"code":"// Centralized API utility with caching, deduplication, and performance optimizations\nimport axios from'axios';// Dynamic base URL detection\nconst getBaseURL=()=>{// If we're in production (ngrok), use the current host\nif(window.location.hostname!=='localhost'&&window.location.hostname!=='127.0.0.1'){return`${window.location.protocol}//${window.location.host}`;}// For local development\nreturn'http://127.0.0.1:5000';};// Create axios instance with default config\nconst api=axios.create({baseURL:getBaseURL(),timeout:10000,headers:{'Content-Type':'application/json'}});// Request deduplication cache\nconst pendingRequests=new Map();// Response cache\nconst cache=new Map();const CACHE_DURATION=5*60*1000;// 5 minutes\n// Cache utilities\nconst getCacheKey=(url,params)=>{return`${url}?${JSON.stringify(params||{})}`;};const isCacheValid=timestamp=>{return Date.now()-timestamp<CACHE_DURATION;};const getCachedResponse=key=>{const cached=cache.get(key);if(cached&&isCacheValid(cached.timestamp)){return cached.data;}cache.delete(key);return null;};const setCachedResponse=(key,data)=>{cache.set(key,{data,timestamp:Date.now()});};// Request deduplication\nconst deduplicateRequest=async(key,requestFn)=>{if(pendingRequests.has(key)){return pendingRequests.get(key);}const promise=requestFn();pendingRequests.set(key,promise);try{const result=await promise;return result;}finally{pendingRequests.delete(key);}};// API methods with caching and deduplication\nexport const apiService={// GET with caching\nasync get(url){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let useCache=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const cacheKey=getCacheKey(url,params);if(useCache){const cached=getCachedResponse(cacheKey);if(cached){return cached;}}const requestKey=`GET:${cacheKey}`;return deduplicateRequest(requestKey,async()=>{console.log(`Making API request to: ${api.defaults.baseURL}${url}`);try{const response=await api.get(url,{params});console.log('API response received:',response.data);if(useCache){setCachedResponse(cacheKey,response.data);}return response.data;}catch(error){console.error('API request failed:',error);console.error('Request URL:',`${api.defaults.baseURL}${url}`);throw error;}});},// POST without caching\nasync post(url){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const requestKey=`POST:${url}:${JSON.stringify(data)}`;return deduplicateRequest(requestKey,async()=>{const response=await api.post(url,data);return response.data;});},// PUT without caching\nasync put(url){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await api.put(url,data);return response.data;},// DELETE without caching\nasync delete(url){const response=await api.delete(url);return response.data;},// Clear cache for specific URL pattern\nclearCache(pattern){for(const key of cache.keys()){if(key.includes(pattern)){cache.delete(key);}}},// Clear all cache\nclearAllCache(){cache.clear();}};// Specific API endpoints with optimized caching strategies\nexport const profilesAPI={async getAll(){return apiService.get('/api/profiles',{},true);},async getById(id){return apiService.get(`/api/profiles/${id}`,{},true);},async update(id,data){const result=await apiService.put(`/api/profiles/${id}`,data);// Clear related cache\napiService.clearCache('/api/profiles');return result;},async delete(id){const result=await apiService.delete(`/api/profiles/${id}`);// Clear related cache\napiService.clearCache('/api/profiles');return result;},async importConversation(data){const result=await apiService.post('/api/import-conversation',data);// Clear profiles cache after import\napiService.clearCache('/api/profiles');return result;}};export const analyticsAPI={async getAnalytics(){return apiService.get('/api/analytics',{},true);}};export const conversationAPI={async getConversation(userId){return apiService.get(`/api/conversations/${userId}`,{},true);},async addMessage(userId,message){const result=await apiService.post(`/api/conversations/${userId}`,message);// Clear conversation cache\napiService.clearCache(`/api/conversations/${userId}`);return result;}};export const aiAPI={async getReply(data){return apiService.post('/api/ai/reply',data);},async polishMessage(data){return apiService.post('/api/ai/polish',data);},async simulateConversation(data){return apiService.post('/api/simulate-conversation',data);},async photoAIResponse(data){return apiService.post('/api/photo-ai-response',data);},async regenerateReplies(data){return apiService.post('/api/regenerate-replies',data);}};export const settingsAPI={async getSettings(){return apiService.get('/api/settings',{},true);},async updateSettings(data){const result=await apiService.put('/api/settings',data);// Clear settings cache\napiService.clearCache('/api/settings');return result;},async testGemini(data){return apiService.post('/api/test-gemini',data);}};export const authAPI={async login(credentials){return apiService.post('/api/auth/login',credentials);},async register(userData){return apiService.post('/api/auth/register',userData);},async setCurrentUser(username){return apiService.post('/api/auth/set-user',{username});},async changePassword(data){return apiService.post('/api/auth/change-password',data);}};// Error handling interceptor\napi.interceptors.response.use(response=>response,error=>{var _error$response;console.error('API Error:',error);// Handle specific error cases\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Handle unauthorized\nwindow.location.href='/login';}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","getBaseURL","window","location","hostname","protocol","host","api","create","baseURL","timeout","headers","pendingRequests","Map","cache","CACHE_DURATION","getCacheKey","url","params","JSON","stringify","isCacheValid","timestamp","Date","now","getCachedResponse","key","cached","get","data","delete","setCachedResponse","set","deduplicateRequest","requestFn","has","promise","result","apiService","arguments","length","undefined","useCache","cacheKey","requestKey","console","log","defaults","response","error","post","put","clearCache","pattern","keys","includes","clearAllCache","clear","profilesAPI","getAll","getById","id","update","importConversation","analyticsAPI","getAnalytics","conversationAPI","getConversation","userId","addMessage","message","aiAPI","getReply","polishMessage","simulateConversation","photoAIResponse","regenerateReplies","settingsAPI","getSettings","updateSettings","testGemini","authAPI","login","credentials","register","userData","setCurrentUser","username","changePassword","interceptors","use","_error$response","status","href","Promise","reject"],"sources":["/workspace/frontend/src/utils/api.js"],"sourcesContent":["// Centralized API utility with caching, deduplication, and performance optimizations\nimport axios from 'axios';\n\n// Dynamic base URL detection\nconst getBaseURL = () => {\n  // If we're in production (ngrok), use the current host\n  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {\n    return `${window.location.protocol}//${window.location.host}`;\n  }\n  // For local development\n  return 'http://127.0.0.1:5000';\n};\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: getBaseURL(),\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request deduplication cache\nconst pendingRequests = new Map();\n\n// Response cache\nconst cache = new Map();\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Cache utilities\nconst getCacheKey = (url, params) => {\n  return `${url}?${JSON.stringify(params || {})}`;\n};\n\nconst isCacheValid = (timestamp) => {\n  return Date.now() - timestamp < CACHE_DURATION;\n};\n\nconst getCachedResponse = (key) => {\n  const cached = cache.get(key);\n  if (cached && isCacheValid(cached.timestamp)) {\n    return cached.data;\n  }\n  cache.delete(key);\n  return null;\n};\n\nconst setCachedResponse = (key, data) => {\n  cache.set(key, {\n    data,\n    timestamp: Date.now(),\n  });\n};\n\n// Request deduplication\nconst deduplicateRequest = async (key, requestFn) => {\n  if (pendingRequests.has(key)) {\n    return pendingRequests.get(key);\n  }\n\n  const promise = requestFn();\n  pendingRequests.set(key, promise);\n\n  try {\n    const result = await promise;\n    return result;\n  } finally {\n    pendingRequests.delete(key);\n  }\n};\n\n// API methods with caching and deduplication\nexport const apiService = {\n  // GET with caching\n  async get(url, params = {}, useCache = true) {\n    const cacheKey = getCacheKey(url, params);\n    \n    if (useCache) {\n      const cached = getCachedResponse(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    const requestKey = `GET:${cacheKey}`;\n    return deduplicateRequest(requestKey, async () => {\n      console.log(`Making API request to: ${api.defaults.baseURL}${url}`);\n      try {\n        const response = await api.get(url, { params });\n        console.log('API response received:', response.data);\n        if (useCache) {\n          setCachedResponse(cacheKey, response.data);\n        }\n        return response.data;\n      } catch (error) {\n        console.error('API request failed:', error);\n        console.error('Request URL:', `${api.defaults.baseURL}${url}`);\n        throw error;\n      }\n    });\n  },\n\n  // POST without caching\n  async post(url, data = {}) {\n    const requestKey = `POST:${url}:${JSON.stringify(data)}`;\n    return deduplicateRequest(requestKey, async () => {\n      const response = await api.post(url, data);\n      return response.data;\n    });\n  },\n\n  // PUT without caching\n  async put(url, data = {}) {\n    const response = await api.put(url, data);\n    return response.data;\n  },\n\n  // DELETE without caching\n  async delete(url) {\n    const response = await api.delete(url);\n    return response.data;\n  },\n\n  // Clear cache for specific URL pattern\n  clearCache(pattern) {\n    for (const key of cache.keys()) {\n      if (key.includes(pattern)) {\n        cache.delete(key);\n      }\n    }\n  },\n\n  // Clear all cache\n  clearAllCache() {\n    cache.clear();\n  },\n};\n\n// Specific API endpoints with optimized caching strategies\nexport const profilesAPI = {\n  async getAll() {\n    return apiService.get('/api/profiles', {}, true);\n  },\n\n  async getById(id) {\n    return apiService.get(`/api/profiles/${id}`, {}, true);\n  },\n\n  async update(id, data) {\n    const result = await apiService.put(`/api/profiles/${id}`, data);\n    // Clear related cache\n    apiService.clearCache('/api/profiles');\n    return result;\n  },\n\n  async delete(id) {\n    const result = await apiService.delete(`/api/profiles/${id}`);\n    // Clear related cache\n    apiService.clearCache('/api/profiles');\n    return result;\n  },\n\n  async importConversation(data) {\n    const result = await apiService.post('/api/import-conversation', data);\n    // Clear profiles cache after import\n    apiService.clearCache('/api/profiles');\n    return result;\n  },\n};\n\nexport const analyticsAPI = {\n  async getAnalytics() {\n    return apiService.get('/api/analytics', {}, true);\n  },\n};\n\nexport const conversationAPI = {\n  async getConversation(userId) {\n    return apiService.get(`/api/conversations/${userId}`, {}, true);\n  },\n\n  async addMessage(userId, message) {\n    const result = await apiService.post(`/api/conversations/${userId}`, message);\n    // Clear conversation cache\n    apiService.clearCache(`/api/conversations/${userId}`);\n    return result;\n  },\n};\n\nexport const aiAPI = {\n  async getReply(data) {\n    return apiService.post('/api/ai/reply', data);\n  },\n\n  async polishMessage(data) {\n    return apiService.post('/api/ai/polish', data);\n  },\n\n  async simulateConversation(data) {\n    return apiService.post('/api/simulate-conversation', data);\n  },\n\n  async photoAIResponse(data) {\n    return apiService.post('/api/photo-ai-response', data);\n  },\n\n  async regenerateReplies(data) {\n    return apiService.post('/api/regenerate-replies', data);\n  },\n};\n\nexport const settingsAPI = {\n  async getSettings() {\n    return apiService.get('/api/settings', {}, true);\n  },\n\n  async updateSettings(data) {\n    const result = await apiService.put('/api/settings', data);\n    // Clear settings cache\n    apiService.clearCache('/api/settings');\n    return result;\n  },\n\n  async testGemini(data) {\n    return apiService.post('/api/test-gemini', data);\n  },\n};\n\nexport const authAPI = {\n  async login(credentials) {\n    return apiService.post('/api/auth/login', credentials);\n  },\n\n  async register(userData) {\n    return apiService.post('/api/auth/register', userData);\n  },\n\n  async setCurrentUser(username) {\n    return apiService.post('/api/auth/set-user', { username });\n  },\n\n  async changePassword(data) {\n    return apiService.post('/api/auth/change-password', data);\n  },\n};\n\n// Error handling interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    \n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Handle unauthorized\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}