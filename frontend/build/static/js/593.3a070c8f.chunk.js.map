{"version":3,"file":"static/js/593.3a070c8f.chunk.js","mappings":"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","sources":["pages/AIAssistant.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  TextField,\n  Button,\n  Typography,\n  Paper,\n  Container,\n  Chip,\n  Divider,\n  Alert,\n  Snackbar,\n  Alert as MuiAlert\n} from '@mui/material';\nimport { Send as SendIcon } from '@mui/icons-material';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst AIAssistant = () => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [profiles, setProfiles] = useState([]);\n  const [selectedProfile, setSelectedProfile] = useState('');\n  const [geminiApiKey, setGeminiApiKey] = useState('');\n  const [showApiKeyError, setShowApiKeyError] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchProfiles();\n    fetchSettings();\n  }, []);\n\n  // 1. When changing selectedProfile, clear the chat\n  useEffect(() => {\n    setMessages([]);\n  }, [selectedProfile]);\n\n  const fetchProfiles = async () => {\n    try {\n      const response = await axios.get('https://3e79a6ace678.ngrok-free.app/api/profiles');\n      // Convert object to array with id field for easier handling\n      const profilesArray = Object.entries(response.data).map(([id, profile]) => ({\n        id,\n        ...profile\n      }));\n      setProfiles(profilesArray);\n    } catch (error) {\n      console.error('Error fetching profiles:', error);\n    }\n  };\n\n  const fetchSettings = async () => {\n    try {\n      const response = await axios.get('https://3e79a6ace678.ngrok-free.app/api/settings');\n      setGeminiApiKey(response.data.gemini_api_key || '');\n    } catch (error) {\n      console.error('Error fetching settings:', error);\n    }\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    if (!geminiApiKey) {\n      setShowApiKeyError(true);\n      return;\n    }\n\n    const userMessage = input;\n    setInput('');\n    setLoading(true);\n\n    // Add user message to chat\n    setMessages(prev => [...prev, { role: 'user', content: userMessage }]);\n\n    try {\n      // Get selected profile data\n      const profileData = selectedProfile ? profiles.find(p => p.id === selectedProfile) : null;\n      \n      let aiResponse;\n      \n      if (profileData) {\n        // Create a custom prompt with profile data for context-aware responses\n        const recentMessages = messages.slice(-6).map(m => `${m.role === 'user' ? 'You' : 'AI'}: ${m.content}`).join('\\n');\n        const contextPrompt = `You are an AI assistant helping with dating and conversation management. \n\nContext about the girl you're asking about:\nName: ${profileData.name || 'Unknown'}\nUsername: ${profileData.username || 'Unknown'}\nTone Preference: ${profileData.tone_preference || 'Not specified'}\nLikes: ${profileData.likes?.join(', ') || 'None specified'}\nPersonality Tags: ${profileData.personality_tags?.join(', ') || 'None specified'}\nInside Jokes: ${profileData.inside_jokes?.join(', ') || 'None specified'}\nDetails: ${JSON.stringify(profileData.details || {})}\nConversation Goals: ${profileData.conversation_goals?.join(', ') || 'None specified'}\nRecent Messages: ${profileData.previous_messages?.slice(-20).map(m => `${m.from}: ${m.text}`).join('\\n') || 'No recent messages'}\n\nRecent Conversation:\n${recentMessages}\n\nBased on this information, please answer the following question: ${userMessage}\n\nKeep your answer concise and actionable unless I specifically ask for a detailed breakdown. Avoid markdown formatting, bullet lists, or section headers unless requested.`;\n\n        // Call Gemini directly with the context-aware prompt\n        if (geminiApiKey) {\n          const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=AIzaSyBJYFwycbxfwTal-Dfoh-wdb3kN_PhsEJo', {\n            contents: [{ parts: [{ text: contextPrompt }] }],\n            generationConfig: { temperature: 0.7, maxOutputTokens: 2048 }\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          aiResponse = response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I couldn\\'t generate a response.';\n        } else {\n          aiResponse = 'Sorry, AI functionality is currently unavailable. API key not set.';\n        }\n      } else {\n        // For general questions, we need to create a custom prompt and call Gemini directly\n        const recentMessages = messages.slice(-6).map(m => `${m.role === 'user' ? 'You' : 'AI'}: ${m.content}`).join('\\n');\n        const generalPrompt = `You are an AI assistant helping with dating and conversation management. \n\nRecent Conversation:\n${recentMessages}\n\nPlease answer this general question about dating and conversation strategies: ${userMessage}\n\nKeep your answer concise and actionable unless I specifically ask for a detailed breakdown. Avoid markdown formatting, bullet lists, or section headers unless requested.`;\n\n        // Call Gemini directly for general questions\n        if (geminiApiKey) {\n          const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=AIzaSyBJYFwycbxfwTal-Dfoh-wdb3kN_PhsEJo', {\n            contents: [{ parts: [{ text: generalPrompt }] }],\n            generationConfig: { temperature: 0.7, maxOutputTokens: 2048 }\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          \n          aiResponse = response.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I couldn\\'t generate a response.';\n        } else {\n          aiResponse = 'Sorry, AI functionality is currently unavailable. API key not set.';\n        }\n      }\n      \n      setMessages(prev => [...prev, { role: 'assistant', content: aiResponse }]);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, { \n        role: 'assistant', \n        content: 'Sorry, I encountered an error while processing your request.' \n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const getSelectedProfileInfo = () => {\n    if (!selectedProfile) return null;\n    return profiles.find(p => p.id === selectedProfile);\n  };\n\n  const selectedProfileData = getSelectedProfileInfo();\n\n  return (\n    <>\n      <Box\n        sx={{\n          minHeight: '100vh',\n          width: '100%',\n          background: 'none',\n          fontFamily: 'Inter, Poppins, system-ui, sans-serif',\n          color: 'var(--text-primary)',\n          transition: 'color 0.3s',\n        }}\n      >\n        <Container maxWidth=\"lg\" sx={{ py: { xs: 3, md: 8 }, maxWidth: 1200 }}>\n          {/* Main Hero Section */}\n          <Box\n            className=\"glass-element\"\n            sx={{\n              textAlign: { xs: 'center', md: 'left' },\n              mb: { xs: 6, md: 10 },\n              background: { xs: undefined, md: undefined },\n              color: 'var(--text-primary)',\n              boxShadow: '0 2px 12px 0 rgba(0,0,0,0.04)',\n              borderRadius: 3,\n              p: { xs: 2, md: 4 },\n              transition: 'background 0.3s, color 0.3s',\n            }}\n          >\n            <Typography variant=\"h1\" sx={{ fontSize: { xs: 40, md: 56 }, fontWeight: 800, letterSpacing: '-0.02em', mb: 2, color: 'var(--text-primary)' }}>\n              Get Better at Dating with AI\n            </Typography>\n            <Typography variant=\"h5\" sx={{ fontSize: { xs: 20, md: 28 }, fontWeight: 500, color: 'var(--text-secondary)', mb: 4, maxWidth: 700 }}>\n              Your smart, modern AI wingman. Start a conversation, get advice, or ask about anyone in your database.\n            </Typography>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              sx={{\n                fontSize: 18,\n                fontWeight: 600,\n                borderRadius: 2,\n                px: 5,\n                py: 1.5,\n                boxShadow: '0 4px 12px 0 rgba(108,99,255,0.08)',\n                background: 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)',\n                color: 'white',\n                mb: { xs: 4, md: 0 },\n                transition: 'all 0.2s',\n                '&:hover': { filter: 'brightness(1.08)' },\n                outline: 'none',\n              }}\n              onClick={() => {\n                const el = document.getElementById('ai-chat-section');\n                if (el) el.scrollIntoView({ behavior: 'smooth' });\n              }}\n            >\n              Start Conversation\n            </Button>\n          </Box>\n\n          {/* Profile Selection - horizontal card pills */}\n          <Box sx={{ mb: { xs: 6, md: 10 }, display: 'flex', flexDirection: 'column', alignItems: { xs: 'center', md: 'flex-start' } }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 24, fontWeight: 600, mb: 2, color: 'var(--text-primary)' }}>\n              Choose a Profile\n            </Typography>\n            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', width: '100%', justifyContent: { xs: 'center', md: 'flex-start' } }}>\n              <Button\n                variant={selectedProfile === '' ? 'contained' : 'outlined'}\n                onClick={() => setSelectedProfile('')}\n                sx={{\n                  borderRadius: 3,\n                  px: 3,\n                  py: 1.2,\n                  fontWeight: 500,\n                  fontSize: 16,\n                  background: selectedProfile === '' ? 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)' : 'var(--card-bg)',\n                  color: selectedProfile === '' ? 'white' : 'var(--text-primary)',\n                  boxShadow: selectedProfile === '' ? '0 4px 12px 0 rgba(108,99,255,0.08)' : 'none',\n                  border: '1.5px solid #e2e8f0',\n                  transition: 'all 0.2s',\n                  '&:hover': { transform: 'scale(1.02)', filter: 'brightness(1.08)' },\n                  outline: 'none',\n                }}\n              >\n                General (No Profile)\n              </Button>\n              {profiles.map((profile) => (\n                <Button\n                  key={profile.id}\n                  variant={selectedProfile === profile.id ? 'contained' : 'outlined'}\n                  onClick={() => setSelectedProfile(profile.id)}\n                  sx={{\n                    borderRadius: 3,\n                    px: 3,\n                    py: 1.2,\n                    fontWeight: 500,\n                    fontSize: 16,\n                    background: selectedProfile === profile.id ? 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)' : 'var(--card-bg)',\n                    color: selectedProfile === profile.id ? 'white' : 'var(--text-primary)',\n                    boxShadow: selectedProfile === profile.id ? '0 4px 12px 0 rgba(108,99,255,0.08)' : 'none',\n                    border: '1.5px solid #e2e8f0',\n                    transition: 'all 0.2s',\n                    '&:hover': { transform: 'scale(1.02)', filter: 'brightness(1.08)' },\n                    outline: 'none',\n                  }}\n                >\n                  {profile.name || profile.username || profile.id}\n                </Button>\n              ))}\n            </Box>\n          </Box>\n\n          {/* AI Chat Section */}\n          <Box id=\"ai-chat-section\" sx={{ mb: { xs: 6, md: 10 }, display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 6, alignItems: 'flex-start', justifyContent: 'center' }}>\n            {/* Profile Info Card (secondary) */}\n            {selectedProfileData && (\n              <Paper elevation={2} className=\"glass-element\" sx={{ p: 3, minWidth: 260, maxWidth: 320, mb: { xs: 4, md: 0 }, borderRadius: 3, boxShadow: '0 4px 6px rgba(0,0,0,0.05)', background: 'var(--gradient-card)', color: 'var(--text-primary)', transition: 'background 0.3s, color 0.3s' }}>\n                <Typography variant=\"h6\" sx={{ fontWeight: 600, fontSize: 20, mb: 2, color: 'var(--text-primary)' }}>Profile Info</Typography>\n                {selectedProfileData.likes?.length > 0 && (\n                  <Box sx={{ mb: 1 }}>\n                    <Typography variant=\"caption\" sx={{ color: 'var(--text-primary)', fontWeight: 500 }}>Likes:</Typography>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\n                      {selectedProfileData.likes.map((like, index) => (\n                        <Chip\n                          key={index}\n                          label={like}\n                          size=\"small\"\n                          variant=\"filled\"\n                          sx={{\n                            color: 'var(--text-primary)',\n                            background: (theme) => theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.04)' : '#e3e8f0',\n                            border: (theme) => theme.palette.mode === 'dark' ? '1px solid rgba(255,255,255,0.25)' : '1px solid #cbd5e1',\n                            fontWeight: 500,\n                            fontSize: 15,\n                            letterSpacing: 0.1,\n                            mb: 0.5,\n                          }}\n                        />\n                      ))}\n                    </Box>\n                  </Box>\n                )}\n                {selectedProfileData.personality_tags?.length > 0 && (\n                  <Box sx={{ mb: 1 }}>\n                    <Typography variant=\"caption\" color=\"var(--text-secondary)\">Personality:</Typography>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\n                      {selectedProfileData.personality_tags.map((tag, index) => (\n                        <Chip key={index} label={tag} size=\"small\" color=\"primary\" />\n                      ))}\n                    </Box>\n                  </Box>\n                )}\n                {selectedProfileData.inside_jokes?.length > 0 && (\n                  <Box sx={{ mb: 1 }}>\n                    <Typography variant=\"caption\" color=\"var(--text-secondary)\">Inside Jokes:</Typography>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\n                      {selectedProfileData.inside_jokes.map((joke, index) => (\n                        <Chip key={index} label={joke} size=\"small\" color=\"secondary\" />\n                      ))}\n                    </Box>\n                  </Box>\n                )}\n                {selectedProfileData.conversation_goals?.length > 0 && (\n                  <Box>\n                    <Typography variant=\"caption\" color=\"var(--text-secondary)\">Goals:</Typography>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\n                      {selectedProfileData.conversation_goals.map((goal, index) => (\n                        <Chip key={index} label={goal} size=\"small\" color=\"success\" />\n                      ))}\n                    </Box>\n                  </Box>\n                )}\n              </Paper>\n            )}\n            {/* Group Chat Card and Quick Questions in a vertical flex container */}\n            <Box sx={{ display: 'flex', flexDirection: 'column', flex: 1, minWidth: 320, gap: 3 }}>\n            {/* Chat Card */}\n              <Paper elevation={3} className=\"card\" sx={{ flex: 1, borderRadius: 3, boxShadow: '0 4px 6px rgba(0,0,0,0.05)', display: 'flex', flexDirection: 'column', minHeight: 420, background: 'var(--card-bg)', color: 'var(--text-primary)', transition: 'background 0.3s, color 0.3s' }}>\n              <Box sx={{ flex: 1, overflow: 'auto', p: 3 }}>\n                {messages.length === 0 ? (\n                  <Box sx={{ textAlign: 'center', py: 4 }}>\n                      <Typography variant=\"h6\" color=\"var(--text-secondary)\" gutterBottom>\n                      Start a conversation with your AI assistant\n                    </Typography>\n                      <Typography variant=\"body2\" color=\"var(--text-secondary)\">\n                      {selectedProfileData \n                        ? `Ask me anything about ${selectedProfileData.name || selectedProfileData.username}!`\n                        : 'Ask me about dating strategies, conversation tips, or select a profile to ask specific questions.'\n                      }\n                    </Typography>\n                  </Box>\n                ) : (\n                  messages.map((message, index) => (\n                    <Box\n                      key={index}\n                      sx={{\n                        mb: 2,\n                        display: 'flex',\n                        justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',\n                        transition: 'all 0.2s',\n                      }}\n                    >\n                      <Paper\n                        sx={{\n                          p: 2,\n                          maxWidth: '70%',\n                          backgroundColor: message.role === 'user' ? 'primary.main' : 'grey.100',\n                            color: message.role === 'user' ? 'white' : 'var(--text-primary)',\n                          borderRadius: 2,\n                          boxShadow: message.role === 'user' ? '0 2px 8px 0 rgba(108,99,255,0.08)' : '0 2px 8px 0 rgba(0,0,0,0.04)',\n                          fontSize: 16,\n                          fontWeight: 400,\n                          letterSpacing: '-0.01em',\n                          transition: 'all 0.2s',\n                        }}\n                      >\n                        <Typography variant=\"body1\" sx={{ fontSize: 16, lineHeight: 1.6 }}>{message.content}</Typography>\n                      </Paper>\n                    </Box>\n                  ))\n                )}\n                {loading && (\n                  <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>\n                    <Paper sx={{ p: 2, backgroundColor: 'grey.100', borderRadius: 2 }}>\n                        <Typography variant=\"body1\" color=\"var(--text-secondary)\">\n                        <span className=\"typing-indicator\" style={{ display: 'inline-flex', gap: 2, alignItems: 'center' }}>\n                          <span style={{ width: 8, height: 8, borderRadius: '50%', background: '#6c63ff', display: 'inline-block', marginRight: 2, animation: 'blink 1s infinite alternate' }}></span>\n                          <span style={{ width: 8, height: 8, borderRadius: '50%', background: '#6c63ff', display: 'inline-block', marginRight: 2, animation: 'blink 1s 0.2s infinite alternate' }}></span>\n                          <span style={{ width: 8, height: 8, borderRadius: '50%', background: '#6c63ff', display: 'inline-block', animation: 'blink 1s 0.4s infinite alternate' }}></span>\n                        </span>\n                        Thinking...\n                      </Typography>\n                    </Paper>\n                  </Box>\n                )}\n              </Box>\n              <Divider />\n              {/* Input */}\n                <Box sx={{ p: 3, bgcolor: 'transparent', borderBottomLeftRadius: 12, borderBottomRightRadius: 12 }}>\n                <Box sx={{ display: 'flex', gap: 2 }}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    maxRows={4}\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder={\n                      selectedProfileData \n                        ? `Ask me about ${selectedProfileData.name || selectedProfileData.username}...`\n                        : \"Ask me anything about dating, conversation strategies...\"\n                    }\n                    disabled={loading}\n                    sx={{\n                      fontSize: 16,\n                      borderRadius: 2,\n                        background: 'var(--card-bg)',\n                        color: 'var(--text-primary)',\n                      boxShadow: '0 2px 8px 0 rgba(0,0,0,0.03)',\n                      '& .MuiOutlinedInput-root': {\n                        borderRadius: 2,\n                          background: 'var(--card-bg)',\n                          color: 'var(--text-primary)',\n                      },\n                      '& .Mui-focused .MuiOutlinedInput-notchedOutline': {\n                        borderColor: '#6c63ff',\n                        boxShadow: '0 0 0 2px #6c63ff33',\n                      },\n                    }}\n                  />\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSend}\n                    disabled={loading || !input.trim()}\n                    sx={{\n                      height: '56px',\n                      minWidth: '56px',\n                      borderRadius: 2,\n                      fontWeight: 600,\n                      fontSize: 20,\n                      background: 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)',\n                      color: 'white',\n                      boxShadow: '0 4px 12px 0 rgba(108,99,255,0.08)',\n                      transition: 'all 0.2s',\n                      '&:hover': { filter: 'brightness(1.08)' },\n                      outline: 'none',\n                    }}\n                  >\n                    <SendIcon />\n                  </Button>\n                </Box>\n              </Box>\n            </Paper>\n              {/* Quick Questions Section - now always directly beneath the chat card */}\n              <Box className=\"card\" sx={{ mt: 0, background: 'var(--card-bg)', color: 'var(--text-primary)', borderRadius: 3, boxShadow: '0 2px 8px 0 rgba(0,0,0,0.03)', transition: 'background 0.3s, color 0.3s', pb: 4 }}>\n                <Typography variant=\"h6\" sx={{ fontSize: 24, fontWeight: 600, mb: 2, color: 'var(--text-primary)', ml: 2 }}>\n            Quick Questions\n          </Typography>\n                <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' }, gap: 4, maxWidth: 700, mx: 'auto', mb: 0, pb: 0 }}>\n              {[\n                \"What's her favorite pet?\",\n                \"What should I talk about next?\",\n                \"How can I make her laugh?\",\n                \"What's the best time to ask her out?\"\n              ].map((question, index) => (\n                <Paper\n                  key={index}\n                  elevation={1}\n                      className=\"glass-element\"\n                  sx={{\n                    p: 3,\n                    borderRadius: 3,\n                        fontSize: 18,\n                        fontWeight: 600,\n                        color: 'var(--text-primary)',\n                        background: 'var(--gradient-card)',\n                    boxShadow: '0 2px 8px 0 rgba(0,0,0,0.03)',\n                    cursor: 'pointer',\n                    transition: 'all 0.2s',\n                    '&:hover': { transform: 'scale(1.02)', boxShadow: '0 4px 16px 0 rgba(108,99,255,0.10)' },\n                    outline: 'none',\n                    textAlign: 'center',\n                        minHeight: 80,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                  }}\n                  tabIndex={0}\n                  role=\"button\"\n                  aria-label={`Ask: ${question}`}\n                  onClick={() => setInput(question)}\n                >\n                  {question}\n                </Paper>\n              ))}\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </Container>\n      </Box>\n      <Snackbar\n        open={showApiKeyError}\n        autoHideDuration={6000}\n        onClose={() => setShowApiKeyError(false)}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <MuiAlert\n          elevation={6}\n          variant=\"filled\"\n          severity=\"error\"\n          sx={{ fontSize: 18, alignItems: 'center' }}\n          action={\n            <Button color=\"inherit\" size=\"small\" onClick={() => navigate('/settings')}>Go to Settings</Button>\n          }\n        >\n          AI features are unavailable. Please enter your Gemini API key in Settings.\n        </MuiAlert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default AIAssistant; "],"names":["AIAssistant","_selectedProfileData$","_selectedProfileData$2","_selectedProfileData$3","_selectedProfileData$4","input","setInput","useState","messages","setMessages","loading","setLoading","profiles","setProfiles","selectedProfile","setSelectedProfile","geminiApiKey","setGeminiApiKey","showApiKeyError","setShowApiKeyError","navigate","useNavigate","useEffect","fetchProfiles","fetchSettings","async","response","axios","get","profilesArray","Object","entries","data","map","_ref","id","profile","error","console","gemini_api_key","handleSend","trim","userMessage","prev","role","content","profileData","find","p","aiResponse","_profileData$likes","_profileData$personal","_profileData$inside_j","_profileData$conversa","_profileData$previous","recentMessages","slice","m","join","contextPrompt","name","username","tone_preference","likes","personality_tags","inside_jokes","JSON","stringify","details","conversation_goals","previous_messages","from","text","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","post","contents","parts","generationConfig","temperature","maxOutputTokens","headers","candidates","generalPrompt","_response$data$candid6","_response$data$candid7","_response$data$candid8","_response$data$candid9","_response$data$candid0","selectedProfileData","_jsxs","_Fragment","children","_jsx","Box","sx","minHeight","width","background","fontFamily","color","transition","Container","maxWidth","py","xs","md","className","textAlign","mb","undefined","boxShadow","borderRadius","Typography","variant","fontSize","fontWeight","letterSpacing","Button","size","px","filter","outline","onClick","el","document","getElementById","scrollIntoView","behavior","display","flexDirection","alignItems","gap","flexWrap","justifyContent","border","transform","Paper","elevation","minWidth","length","mt","like","index","Chip","label","theme","palette","mode","tag","joke","goal","flex","overflow","gutterBottom","message","backgroundColor","lineHeight","style","height","marginRight","animation","Divider","bgcolor","borderBottomLeftRadius","borderBottomRightRadius","TextField","fullWidth","multiline","maxRows","value","onChange","e","target","onKeyPress","key","shiftKey","preventDefault","placeholder","disabled","borderColor","SendIcon","pb","ml","gridTemplateColumns","sm","mx","question","cursor","tabIndex","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","MuiAlert","severity","action"],"sourceRoot":""}