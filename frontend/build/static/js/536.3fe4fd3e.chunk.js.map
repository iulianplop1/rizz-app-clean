{"version":3,"file":"static/js/536.3fe4fd3e.chunk.js","mappings":"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","sources":["pages/ConversationSimulator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Container,\n  Grid,\n  TextField,\n  Button,\n  Card,\n  CardContent,\n  Chip,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Alert,\n  IconButton,\n  Tooltip,\n  LinearProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Stop,\n  Refresh,\n  Person,\n  Psychology,\n  School,\n  Settings,\n  Chat,\n  EmojiEmotions,\n  Speed,\n  TrendingUp,\n  Help,\n  ExpandMore,\n  Add,\n  Delete,\n  Edit,\n  Send\n} from '@mui/icons-material';\nimport axios from 'axios';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { useNavigate } from 'react-router-dom';\n\nconst ConversationSimulator = () => {\n  const [profiles, setProfiles] = useState([]);\n  const [selectedPersonality, setSelectedPersonality] = useState(null);\n  const [customPersonality, setCustomPersonality] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [simulationMode, setSimulationMode] = useState('practice'); // practice, training, advanced\n  const [difficulty, setDifficulty] = useState('medium'); // easy, medium, hard\n  const [aiResponse, setAiResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [personalityDialog, setPersonalityDialog] = useState(false);\n  const [customPersonalityDialog, setCustomPersonalityDialog] = useState(false);\n  const [stats, setStats] = useState({\n    messagesSent: 0,\n    responsesReceived: 0,\n    practiceTime: 0,\n    successRate: 0\n  });\n  const [geminiApiKey, setGeminiApiKey] = useState('');\n  const [showApiKeyError, setShowApiKeyError] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    console.log('ConversationSimulator useEffect - fetching profiles and loading stats');\n    fetchProfiles();\n    loadStats();\n    fetchSettings();\n  }, []);\n\n  // Debug useEffect to monitor state changes\n  useEffect(() => {\n    console.log('State changed - isSimulating:', isSimulating, 'selectedPersonality:', selectedPersonality?.name);\n  }, [isSimulating, selectedPersonality]);\n\n  const fetchProfiles = async () => {\n    try {\n      console.log('Fetching profiles...');\n      const response = await axios.get('https://3e79a6ace678.ngrok-free.app/api/profiles');\n      console.log('Profiles fetched:', response.data.length, 'profiles');\n      setProfiles(response.data);\n    } catch (error) {\n      console.error('Error fetching profiles:', error);\n    }\n  };\n\n  const loadStats = () => {\n    const savedStats = localStorage.getItem('simulatorStats');\n    if (savedStats) {\n      setStats(JSON.parse(savedStats));\n    }\n  };\n\n  const saveStats = (newStats) => {\n    setStats(newStats);\n    localStorage.setItem('simulatorStats', JSON.stringify(newStats));\n  };\n\n  const generatePersonalityFromProfiles = () => {\n    console.log('Generating personality from profiles. Profiles count:', profiles.length);\n    if (profiles.length === 0) {\n      console.log('No profiles found, returning null');\n      return null;\n    }\n\n    // Analyze all profiles to create a composite personality\n    const allLikes = [];\n    const allPersonality = [];\n    const allDetails = {};\n\n    profiles.forEach(profile => {\n      if (profile.likes) allLikes.push(...profile.likes);\n      if (profile.personality_tags) allPersonality.push(...profile.personality_tags);\n      if (profile.details) Object.assign(allDetails, profile.details);\n    });\n\n    // Get most common traits\n    const likeCounts = {};\n    const personalityCounts = {};\n\n    allLikes.forEach(like => {\n      likeCounts[like] = (likeCounts[like] || 0) + 1;\n    });\n\n    allPersonality.forEach(trait => {\n      personalityCounts[trait] = (personalityCounts[trait] || 0) + 1;\n    });\n\n    const topLikes = Object.entries(likeCounts)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 8)\n      .map(([like]) => like);\n\n    const topPersonality = Object.entries(personalityCounts)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 6)\n      .map(([trait]) => trait);\n\n    return {\n      name: \"Composite Girl\",\n      likes: topLikes,\n      personality: topPersonality,\n      details: allDetails,\n      difficulty: 'medium',\n      description: \"AI-generated personality based on your real conversations\"\n    };\n  };\n\n  const startSimulation = async (personality) => {\n    console.log('Starting simulation with personality:', personality);\n    if (!personality) {\n      console.log('Cannot start simulation - no personality provided');\n      return;\n    }\n    setSelectedPersonality(personality);\n    setMessages([]);\n    setIsSimulating(true);\n    setAiResponse('');\n    \n    // Add initial greeting\n    const greeting = generateGreeting(personality);\n    setMessages([{\n      from: 'AI',\n      text: greeting,\n      timestamp: new Date().toLocaleTimeString()\n    }]);\n    console.log('Simulation started - isSimulating should be true');\n  };\n\n  const generateGreeting = (personality) => {\n    const greetings = [\n      \"Hey! How are you doing? 😊\",\n      \"Hi there! What's up?\",\n      \"Hey! Nice to hear from you\",\n      \"Hello! How's your day going?\",\n      \"Hi! What are you up to? 😄\"\n    ];\n    \n    return greetings[Math.floor(Math.random() * greetings.length)];\n  };\n\n  const fetchSettings = async () => {\n    try {\n      const response = await axios.get('https://3e79a6ace678.ngrok-free.app/api/settings');\n      setGeminiApiKey(response.data.gemini_api_key || '');\n    } catch (error) {\n      console.error('Error fetching settings:', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || !selectedPersonality) return;\n    if (!geminiApiKey) {\n      setShowApiKeyError(true);\n      return;\n    }\n\n    const userMessage = input;\n    setInput('');\n    setLoading(true);\n\n    // Add user message\n    const newMessages = [...messages, {\n      from: 'You',\n      text: userMessage,\n      timestamp: new Date().toLocaleTimeString()\n    }];\n    setMessages(newMessages);\n\n    try {\n      // Generate AI response based on personality\n      // Use personality's difficulty if it exists, otherwise use global difficulty\n      const effectiveDifficulty = selectedPersonality.difficulty || difficulty;\n      console.log('Using difficulty:', effectiveDifficulty, '(personality difficulty:', selectedPersonality.difficulty, ', global difficulty:', difficulty, ')');\n      \n      const requestData = {\n        personality: selectedPersonality,\n        userMessage: userMessage,\n        conversationHistory: newMessages,\n        difficulty: effectiveDifficulty,\n        mode: simulationMode\n      };\n      console.log('Sending request to backend:', requestData);\n      const response = await axios.post('https://3e79a6ace678.ngrok-free.app/api/simulate-conversation', requestData);\n\n      console.log('AI Response:', response.data);\n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      const aiResponse = response.data.response;\n      console.log('Extracted AI Response:', aiResponse);\n      console.log('AI Response type:', typeof aiResponse);\n      console.log('AI Response length:', aiResponse ? aiResponse.length : 'null');\n      setAiResponse(aiResponse);\n\n      // Add AI response to conversation\n      const aiMessage = {\n        from: 'AI',\n        text: aiResponse,\n        timestamp: new Date().toLocaleTimeString()\n      };\n      console.log('AI message object:', aiMessage);\n      const updatedMessages = [...newMessages, aiMessage];\n      console.log('Updated messages array:', updatedMessages);\n      console.log('Messages array length:', updatedMessages.length);\n      setMessages(updatedMessages);\n      console.log('setMessages called with:', updatedMessages.length, 'messages');\n\n      // Update stats\n      const newStats = {\n        ...stats,\n        messagesSent: stats.messagesSent + 1,\n        responsesReceived: stats.responsesReceived + 1\n      };\n      saveStats(newStats);\n      \n      console.log('After successful AI response - isSimulating:', isSimulating);\n      console.log('After successful AI response - selectedPersonality:', selectedPersonality);\n      console.log('After successful AI response - messages count:', messages.length);\n      \n      // Force a re-render check\n      setTimeout(() => {\n        console.log('After 100ms - isSimulating:', isSimulating);\n        console.log('After 100ms - selectedPersonality:', selectedPersonality);\n        console.log('After 100ms - messages count:', messages.length);\n      }, 100);\n\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      console.log('Current isSimulating state:', isSimulating);\n      console.log('Current selectedPersonality:', selectedPersonality);\n      setAiResponse('Sorry, I encountered an error. Please try again.');\n    } finally {\n      setLoading(false);\n      console.log('After finally - isSimulating:', isSimulating);\n      console.log('After finally - selectedPersonality:', selectedPersonality);\n    }\n  };\n\n  const stopSimulation = () => {\n    setIsSimulating(false);\n    setSelectedPersonality(null);\n    setMessages([]);\n    setAiResponse('');\n  };\n\n  const resetSimulation = () => {\n    setMessages([]);\n    setAiResponse('');\n    if (selectedPersonality) {\n      const greeting = generateGreeting(selectedPersonality);\n      setMessages([{\n        from: 'AI',\n        text: greeting,\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }\n  };\n\n  const createCustomPersonality = () => {\n    setCustomPersonalityDialog(true);\n  };\n\n  const saveCustomPersonality = (personality) => {\n    setCustomPersonality(personality);\n    setCustomPersonalityDialog(false);\n  };\n\n  const getDifficultyColor = (level) => {\n    switch (level) {\n      case 'easy': return 'success';\n      case 'medium': return 'warning';\n      case 'hard': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getModeDescription = (mode) => {\n    switch (mode) {\n      case 'practice': return 'Free practice with AI responses';\n      case 'training': return 'Guided training with tips and feedback';\n      case 'advanced': return 'Advanced scenarios and challenges';\n      default: return '';\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4, fontFamily: 'Inter, SF Pro Display, -apple-system, BlinkMacSystemFont, Segoe UI, sans-serif' }}>\n      {/* Header with Practice Stats widget */}\n      <Box sx={{ display: 'flex', alignItems: { xs: 'flex-start', sm: 'center' }, mb: 4, gap: 2, flexWrap: 'wrap', justifyContent: 'space-between' }}>\n        <Box>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <School sx={{ fontSize: 40, color: 'primary.main' }} />\n            <Typography variant=\"h3\" component=\"h1\" sx={{ fontWeight: 800, fontSize: { xs: 28, md: 32 }, color: 'var(--text-primary)' }}>\n              Conversation Simulator\n            </Typography>\n          </Box>\n          <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mt: 1, fontSize: 16, fontWeight: 400 }}>\n            Practice conversations with AI-generated personalities based on your real conversations. Perfect for testing different approaches in a safe environment!\n          </Typography>\n        </Box>\n        {/* Minimalist Practice Stats Widget */}\n        <Paper className=\"card\" sx={{ display: 'flex', alignItems: 'center', gap: 2, px: 3, py: 1.5, borderRadius: 3, boxShadow: '0 2px 8px rgba(0,0,0,0.10)', background: 'var(--card-bg)', color: 'var(--text-primary)', minWidth: 0, mt: { xs: 2, sm: 0 }, width: 'auto', flexWrap: 'wrap' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <TrendingUp sx={{ color: '#2563EB', fontSize: 20 }} />\n            <Typography variant=\"caption\" sx={{ color: 'var(--text-secondary)', fontWeight: 600, fontSize: 14 }}>Stats</Typography>\n          </Box>\n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1, height: 24, borderColor: '#e5e7eb' }} />\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"caption\" sx={{ color: 'var(--text-secondary)' }}>Sent</Typography>\n            <Typography variant=\"body2\" sx={{ fontWeight: 600, fontSize: 15 }}>{stats.messagesSent}</Typography>\n          </Box>\n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1, height: 24, borderColor: '#e5e7eb' }} />\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"caption\" sx={{ color: 'var(--text-secondary)' }}>Resp</Typography>\n            <Typography variant=\"body2\" sx={{ fontWeight: 600, fontSize: 15 }}>{stats.responsesReceived}</Typography>\n          </Box>\n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1, height: 24, borderColor: '#e5e7eb' }} />\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"caption\" sx={{ color: 'var(--text-secondary)' }}>Time</Typography>\n            <Typography variant=\"body2\" sx={{ fontWeight: 600, fontSize: 15 }}>{Math.floor(stats.practiceTime / 60)}m {stats.practiceTime % 60}s</Typography>\n          </Box>\n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1, height: 24, borderColor: '#e5e7eb' }} />\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n            <Typography variant=\"caption\" sx={{ color: 'var(--text-secondary)' }}>Success</Typography>\n            <Typography variant=\"body2\" sx={{ fontWeight: 600, fontSize: 15 }}>{stats.successRate}%</Typography>\n          </Box>\n        </Paper>\n      </Box>\n      {/* Main Two-Column Layout */}\n      <Box sx={{ display: 'flex', gap: 4, alignItems: 'flex-start', minHeight: '70vh' }}>\n        {/* Left Column (Personality & Settings) */}\n        <Box sx={{ flex: '0 0 40%', minWidth: 320, maxWidth: 420, display: 'flex', flexDirection: 'column', gap: 3 }}>\n          {/* Personality Selection Grid */}\n          <Paper className=\"card\" sx={{ p: 3, borderRadius: 3, boxShadow: '0 2px 8px rgba(0,0,0,0.10)', mb: 0, transition: 'box-shadow 0.2s', background: 'var(--card-bg)', color: 'var(--text-primary)' }}>\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, fontSize: 20, mb: 2, color: 'var(--text-primary)' }}>\n              Choose Personality\n            </Typography>\n            <Grid container spacing={2}>\n              {/* Custom Personality Card */}\n              <Grid item xs={6}>\n                <Card\n                  className=\"card\"\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    boxShadow: '0 2px 8px rgba(0,0,0,0.10)',\n                    cursor: 'pointer',\n                    transition: 'transform 0.2s, box-shadow 0.2s',\n                    '&:hover': { transform: 'scale(1.02)', boxShadow: '0 4px 16px rgba(108,99,255,0.10)' },\n                    border: selectedPersonality?.name === 'Composite Girl' ? '2px solid #2563EB' : '1px solid #e5e7eb',\n                    background: 'var(--card-bg)',\n                    color: 'var(--text-primary)',\n                  }}\n                  onClick={() => {\n                    const personality = generatePersonalityFromProfiles();\n                    if (personality) startSimulation(personality);\n                  }}\n                >\n                  <CardContent>\n                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, color: '#2563EB' }}>🎯 Custom Personality</Typography>\n                    <Typography variant=\"body2\" sx={{ mb: 1, color: 'var(--text-secondary)' }}>\n                      AI-generated from your real conversations\n                    </Typography>\n                    <Chip size=\"small\" label=\"Based on your girls\" color=\"primary\" />\n                  </CardContent>\n                </Card>\n              </Grid>\n              {/* Predefined Personalities (2x2 grid) */}\n              {[\n                {\n                  name: \"Emma - The Adventurous One\",\n                  likes: [\"travel\", \"hiking\", \"photography\", \"coffee\", \"books\"],\n                  personality: [\"adventurous\", \"independent\", \"creative\", \"curious\"],\n                  difficulty: \"easy\",\n                  description: \"Loves exploring new places and sharing experiences\"\n                },\n                {\n                  name: \"Sophia - The Intellectual\",\n                  likes: [\"reading\", \"philosophy\", \"art\", \"wine\", \"museums\"],\n                  personality: [\"intellectual\", \"thoughtful\", \"sophisticated\", \"deep\"],\n                  difficulty: \"medium\",\n                  description: \"Enjoys deep conversations and intellectual topics\"\n                },\n                {\n                  name: \"Isabella - The Social Butterfly\",\n                  likes: [\"parties\", \"dancing\", \"fashion\", \"makeup\", \"friends\"],\n                  personality: [\"social\", \"energetic\", \"fashionable\", \"fun-loving\"],\n                  difficulty: \"medium\",\n                  description: \"Very social and loves having fun with friends\"\n                },\n                {\n                  name: \"Olivia - The Shy One\",\n                  likes: [\"movies\", \"music\", \"anime\", \"gaming\", \"quiet time\"],\n                  personality: [\"shy\", \"introverted\", \"thoughtful\", \"loyal\"],\n                  difficulty: \"hard\",\n                  description: \"Shy but very loyal once you get to know her\"\n                }\n              ].map((personality, idx) => (\n                <Grid item xs={6} key={idx}>\n                  <Card\n                    className=\"card\"\n                    sx={{\n                      p: 2,\n                      borderRadius: 2,\n                      boxShadow: '0 2px 8px rgba(0,0,0,0.10)',\n                      cursor: 'pointer',\n                      transition: 'transform 0.2s, box-shadow 0.2s',\n                      '&:hover': { transform: 'scale(1.02)', boxShadow: '0 4px 16px rgba(108,99,255,0.10)' },\n                      border: selectedPersonality?.name === personality.name ? '2px solid #2563EB' : '1px solid #e5e7eb',\n                      background: 'var(--card-bg)',\n                      color: 'var(--text-primary)',\n                    }}\n                    onClick={() => startSimulation(personality)}\n                  >\n                    <CardContent>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, color: 'var(--text-primary)' }}>{personality.name}</Typography>\n                        <Chip size=\"small\" label={personality.difficulty} color={getDifficultyColor(personality.difficulty)} sx={{ fontWeight: 500, fontSize: 13 }} />\n                      </Box>\n                      <Typography variant=\"body2\" sx={{ mb: 1, color: 'var(--text-secondary)' }}>\n                        {personality.description}\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {personality.likes.slice(0, 3).map((like, i) => (\n                          <Chip\n                            key={i}\n                            size=\"small\"\n                            label={like}\n                            variant=\"outlined\"\n                            sx={{\n                              borderRadius: 2,\n                              fontWeight: 500,\n                              color: 'var(--text-primary)',\n                              borderColor: 'rgba(255,255,255,0.25)',\n                            }}\n                          />\n                        ))}\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<Add />}\n              onClick={createCustomPersonality}\n              sx={{ mt: 3, borderRadius: 2, fontWeight: 600, fontSize: 16 }}\n            >\n              Create Custom Personality\n            </Button>\n          </Paper>\n          {/* Settings Card */}\n          <Paper className=\"card\" sx={{ p: 3, borderRadius: 3, boxShadow: '0 2px 8px rgba(0,0,0,0.10)', mt: 0, background: 'var(--card-bg)', color: 'var(--text-primary)' }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 600, fontSize: 18, mb: 2, color: 'var(--text-primary)' }}>\n              Simulation Settings\n            </Typography>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel sx={{ color: 'var(--text-primary)' }}>Mode</InputLabel>\n              <Select\n                value={simulationMode}\n                label=\"Mode\"\n                onChange={(e) => setSimulationMode(e.target.value)}\n                sx={{\n                  borderRadius: 2,\n                  color: 'var(--text-primary)',\n                  '& .MuiSelect-icon': { color: 'var(--text-primary)' },\n                  '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,255,255,0.18)' },\n                }}\n                MenuProps={{\n                  PaperProps: {\n                    sx: { background: 'var(--card-bg)', color: 'var(--text-primary)' }\n                  }\n                }}\n              >\n                <MenuItem value=\"practice\">Practice Mode</MenuItem>\n                <MenuItem value=\"training\">Training Mode</MenuItem>\n                <MenuItem value=\"advanced\">Advanced Mode</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel sx={{ color: 'var(--text-primary)' }}>Difficulty</InputLabel>\n              <Select\n                value={difficulty}\n                label=\"Difficulty\"\n                onChange={(e) => setDifficulty(e.target.value)}\n                sx={{\n                  borderRadius: 2,\n                  color: 'var(--text-primary)',\n                  '& .MuiSelect-icon': { color: 'var(--text-primary)' },\n                  '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,255,255,0.18)' },\n                }}\n                MenuProps={{\n                  PaperProps: {\n                    sx: { background: 'var(--card-bg)', color: 'var(--text-primary)' }\n                  }\n                }}\n              >\n                <MenuItem value=\"easy\">Easy</MenuItem>\n                <MenuItem value=\"medium\">Medium</MenuItem>\n                <MenuItem value=\"hard\">Hard</MenuItem>\n              </Select>\n            </FormControl>\n            <Typography variant=\"body2\" sx={{ fontSize: 15, color: 'var(--text-secondary)' }}>\n              {getModeDescription(simulationMode)}\n            </Typography>\n          </Paper>\n        </Box>\n        {/* Right Column (Chat Area) */}\n        <Box sx={{ flex: '0 0 60%', minWidth: 340, display: 'flex', flexDirection: 'column', gap: 3 }}>\n          <Paper className=\"card\" sx={{ p: 0, borderRadius: 3, boxShadow: '0 2px 8px rgba(0,0,0,0.10)', height: '70vh', display: 'flex', flexDirection: 'column', background: 'var(--card-bg)', color: 'var(--text-primary)' }}>\n            {/* Chat Header */}\n            <Box sx={{ p: 3, borderBottom: 1, borderColor: 'divider', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Box>\n                <Typography variant=\"h5\" sx={{ fontWeight: 700, fontSize: 20, color: 'var(--text-primary)' }}>\n                  {selectedPersonality ? selectedPersonality.name : 'No Simulation Active'}\n                </Typography>\n                {selectedPersonality && (\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: 15 }}>\n                    {selectedPersonality.description}\n                  </Typography>\n                )}\n              </Box>\n              <Box>\n                {isSimulating ? (\n                  <>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Stop />}\n                      onClick={stopSimulation}\n                      sx={{ mr: 1, borderRadius: 2, fontWeight: 600 }}\n                    >\n                      Stop\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Refresh />}\n                      onClick={resetSimulation}\n                      sx={{ borderRadius: 2, fontWeight: 600 }}\n                    >\n                      Reset\n                    </Button>\n                  </>\n                ) : (\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<PlayArrow />}\n                    disabled={!selectedPersonality}\n                    sx={{ borderRadius: 2, fontWeight: 700, fontSize: 16, background: 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)', color: 'white', boxShadow: '0 4px 12px 0 rgba(108,99,255,0.08)', '&:hover': { filter: 'brightness(1.08)' } }}\n                  >\n                    Start Simulation\n                  </Button>\n                )}\n              </Box>\n            </Box>\n            {/* Messages Area */}\n            <Box sx={{ flex: 1, overflow: 'auto', p: 3, background: 'none' }}>\n              {messages.length === 0 ? (\n                <Box sx={{ textAlign: 'center', mt: 4 }}>\n                  <Chat sx={{ fontSize: 60, color: 'grey.400', mb: 2 }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'var(--text-primary)' }}>\n                    Select a personality to start practicing\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'var(--text-secondary)' }}>\n                    Choose from predefined personalities or create a custom one\n                  </Typography>\n                </Box>\n              ) : (\n                messages.map((message, index) => (\n                  <Box\n                    key={index}\n                    sx={{\n                      mb: 2,\n                      display: 'flex',\n                      justifyContent: message.from === 'You' ? 'flex-end' : 'flex-start',\n                      transition: 'all 0.2s',\n                    }}\n                  >\n                    <Paper\n                      sx={{\n                        p: 2,\n                        maxWidth: '70%',\n                        backgroundColor: message.from === 'You' ? '#2563EB' : 'rgba(255,255,255,0.08)',\n                        color: message.from === 'You' ? 'white' : 'var(--text-primary)',\n                        borderRadius: 2,\n                        boxShadow: '0 2px 8px 0 rgba(0,0,0,0.18)',\n                        border: '1px solid rgba(255,255,255,0.08)',\n                        fontSize: 16,\n                        fontWeight: 400,\n                        letterSpacing: '-0.01em',\n                        transition: 'all 0.2s',\n                      }}\n                    >\n                      <Typography variant=\"body1\" sx={{ fontSize: 16, lineHeight: 1.6 }}>{message.text}</Typography>\n                      <Typography variant=\"caption\" sx={{ opacity: 0.7 }}>\n                        {message.timestamp}\n                      </Typography>\n                    </Paper>\n                  </Box>\n                ))\n              )}\n              {loading && (\n                <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 2 }}>\n                  <Paper sx={{ p: 2, backgroundColor: '#f3f4f6', borderRadius: 2 }}>\n                    <Typography variant=\"body2\" color=\"#6B7280\">\n                      AI is typing...\n                    </Typography>\n                    <LinearProgress sx={{ mt: 1 }} />\n                  </Paper>\n                </Box>\n              )}\n            </Box>\n            {/* Input Area */}\n            <Box sx={{ p: 3, borderTop: 1, borderColor: 'divider', background: 'none' }}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={2}\n                    placeholder=\"Type your message...\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        handleSendMessage();\n                      }\n                    }}\n                    disabled={!isSimulating}\n                    sx={{\n                      borderRadius: 2,\n                      background: 'var(--gradient-card)',\n                      color: 'var(--text-primary)',\n                      fontSize: 16,\n                      border: '1.5px solid rgba(255,255,255,0.18)',\n                      boxShadow: '0 2px 8px 0 rgba(0,0,0,0.10)',\n                      '& .MuiOutlinedInput-root': {\n                        borderRadius: 2,\n                        background: 'var(--gradient-card)',\n                        color: 'var(--text-primary)',\n                        border: 'none',\n                        boxShadow: 'none',\n                        '& input::placeholder, & textarea::placeholder': {\n                          color: '#bdbdbd',\n                          opacity: 1,\n                        },\n                      },\n                      '& .MuiOutlinedInput-notchedOutline': {\n                        border: 'none',\n                      },\n                      '& .Mui-focused .MuiOutlinedInput-notchedOutline': {\n                        borderColor: '#2563EB',\n                        boxShadow: '0 0 0 2px #2563EB33',\n                      },\n                    }}\n                  />\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleSendMessage}\n                    disabled={!isSimulating || !input.trim() || loading}\n                    startIcon={<Send />}\n                    sx={{\n                      borderRadius: 2,\n                      fontWeight: 700,\n                      fontSize: 16,\n                      background: 'linear-gradient(90deg, #6c63ff 0%, #ff6b6b 100%)',\n                      color: 'white',\n                      boxShadow: '0 4px 12px 0 rgba(108,99,255,0.08)',\n                      transition: 'all 0.2s',\n                      '&:hover': { filter: 'brightness(1.08)' },\n                    }}\n                  >\n                    Send\n                  </Button>\n                </Grid>\n              </Grid>\n            </Box>\n          </Paper>\n        </Box>\n      </Box>\n      {/* Custom Personality Dialog */}\n      <Dialog open={customPersonalityDialog} onClose={() => setCustomPersonalityDialog(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Custom Personality</DialogTitle>\n        <DialogContent>\n          <CustomPersonalityForm onSave={saveCustomPersonality} />\n        </DialogContent>\n      </Dialog>\n      <Snackbar\n        open={showApiKeyError}\n        autoHideDuration={6000}\n        onClose={() => setShowApiKeyError(false)}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <MuiAlert\n          elevation={6}\n          variant=\"filled\"\n          severity=\"error\"\n          sx={{ fontSize: 18, alignItems: 'center' }}\n          action={\n            <Button color=\"inherit\" size=\"small\" onClick={() => navigate('/settings')}>Go to Settings</Button>\n          }\n        >\n          AI features are unavailable. Please enter your Gemini API key in Settings.\n        </MuiAlert>\n      </Snackbar>\n    </Container>\n  );\n};\n\n// Custom Personality Form Component\nconst CustomPersonalityForm = ({ onSave }) => {\n  const [personality, setPersonality] = useState({\n    name: '',\n    likes: [],\n    personality: [],\n    details: {},\n    difficulty: 'medium',\n    description: ''\n  });\n  const [newLike, setNewLike] = useState('');\n  const [newTrait, setNewTrait] = useState('');\n\n  const addLike = () => {\n    if (newLike.trim() && !personality.likes.includes(newLike.trim())) {\n      setPersonality({\n        ...personality,\n        likes: [...personality.likes, newLike.trim()]\n      });\n      setNewLike('');\n    }\n  };\n\n  const removeLike = (like) => {\n    setPersonality({\n      ...personality,\n      likes: personality.likes.filter(l => l !== like)\n    });\n  };\n\n  const addTrait = () => {\n    if (newTrait.trim() && !personality.personality.includes(newTrait.trim())) {\n      setPersonality({\n        ...personality,\n        personality: [...personality.personality, newTrait.trim()]\n      });\n      setNewTrait('');\n    }\n  };\n\n  const removeTrait = (trait) => {\n    setPersonality({\n      ...personality,\n      personality: personality.personality.filter(t => t !== trait)\n    });\n  };\n\n  return (\n    <Box sx={{ pt: 1 }}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Personality Name\"\n            value={personality.name}\n            onChange={(e) => setPersonality({ ...personality, name: e.target.value })}\n          />\n        </Grid>\n        \n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            multiline\n            rows={2}\n            label=\"Description\"\n            value={personality.description}\n            onChange={(e) => setPersonality({ ...personality, description: e.target.value })}\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Typography variant=\"subtitle2\" gutterBottom>Likes & Interests</Typography>\n          <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Add interest...\"\n              value={newLike}\n              onChange={(e) => setNewLike(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addLike()}\n            />\n            <Button size=\"small\" onClick={addLike}>Add</Button>\n          </Box>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {personality.likes.map((like, index) => (\n              <Chip\n                key={index}\n                label={like}\n                onDelete={() => removeLike(like)}\n                color=\"primary\"\n              />\n            ))}\n          </Box>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Typography variant=\"subtitle2\" gutterBottom>Personality Traits</Typography>\n          <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Add trait...\"\n              value={newTrait}\n              onChange={(e) => setNewTrait(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addTrait()}\n            />\n            <Button size=\"small\" onClick={addTrait}>Add</Button>\n          </Box>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {personality.personality.map((trait, index) => (\n              <Chip\n                key={index}\n                label={trait}\n                onDelete={() => removeTrait(trait)}\n                color=\"secondary\"\n              />\n            ))}\n          </Box>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <InputLabel>Difficulty</InputLabel>\n            <Select\n              value={personality.difficulty}\n              label=\"Difficulty\"\n              onChange={(e) => setPersonality({ ...personality, difficulty: e.target.value })}\n            >\n              <MenuItem value=\"easy\">Easy</MenuItem>\n              <MenuItem value=\"medium\">Medium</MenuItem>\n              <MenuItem value=\"hard\">Hard</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n\n      <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\n        <Button variant=\"outlined\" onClick={() => onSave(null)}>\n          Cancel\n        </Button>\n        <Button \n          variant=\"contained\" \n          onClick={() => onSave(personality)}\n          disabled={!personality.name.trim()}\n        >\n          Create Personality\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ConversationSimulator; "],"names":["CustomPersonalityForm","_ref7","onSave","personality","setPersonality","useState","name","likes","details","difficulty","description","newLike","setNewLike","newTrait","setNewTrait","addLike","trim","includes","addTrait","_jsxs","Box","sx","pt","children","Grid","container","spacing","_jsx","item","xs","TextField","fullWidth","label","value","onChange","e","target","multiline","rows","md","Typography","variant","gutterBottom","display","gap","mb","size","placeholder","onKeyPress","key","Button","onClick","flexWrap","map","like","index","Chip","onDelete","filter","l","removeLike","color","trait","t","removeTrait","FormControl","InputLabel","Select","MenuItem","mt","justifyContent","disabled","ConversationSimulator","profiles","setProfiles","selectedPersonality","setSelectedPersonality","customPersonality","setCustomPersonality","messages","setMessages","input","setInput","isSimulating","setIsSimulating","simulationMode","setSimulationMode","setDifficulty","aiResponse","setAiResponse","loading","setLoading","personalityDialog","setPersonalityDialog","customPersonalityDialog","setCustomPersonalityDialog","stats","setStats","messagesSent","responsesReceived","practiceTime","successRate","geminiApiKey","setGeminiApiKey","showApiKeyError","setShowApiKeyError","navigate","useNavigate","useEffect","console","log","fetchProfiles","loadStats","fetchSettings","async","response","axios","get","data","length","error","savedStats","localStorage","getItem","JSON","parse","startSimulation","greeting","generateGreeting","from","text","timestamp","Date","toLocaleTimeString","greetings","Math","floor","random","gemini_api_key","handleSendMessage","userMessage","newMessages","effectiveDifficulty","requestData","conversationHistory","mode","post","status","headers","aiMessage","updatedMessages","newStats","setItem","stringify","saveStats","setTimeout","getDifficultyColor","level","Container","maxWidth","py","fontFamily","alignItems","sm","School","fontSize","component","fontWeight","Paper","className","px","borderRadius","boxShadow","background","minWidth","width","TrendingUp","Divider","orientation","flexItem","mx","height","borderColor","minHeight","flex","flexDirection","p","transition","Card","cursor","transform","border","generatePersonalityFromProfiles","allLikes","allPersonality","allDetails","forEach","profile","push","personality_tags","Object","assign","likeCounts","personalityCounts","entries","sort","_ref","_ref2","a","b","slice","_ref3","_ref4","_ref5","_ref6","CardContent","idx","i","startIcon","Add","createCustomPersonality","MenuProps","PaperProps","getModeDescription","borderBottom","_Fragment","Stop","stopSimulation","mr","Refresh","resetSimulation","PlayArrow","overflow","textAlign","Chat","message","backgroundColor","letterSpacing","lineHeight","opacity","LinearProgress","borderTop","shiftKey","preventDefault","Send","Dialog","open","onClose","DialogTitle","DialogContent","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","MuiAlert","elevation","severity","action"],"sourceRoot":""}