{"version":3,"file":"static/js/202.ad918818.chunk.js","mappings":"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","sources":["pages/Settings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Container,\n  Grid,\n  TextField,\n  Button,\n  Switch,\n  FormControlLabel,\n  Divider,\n  Alert,\n  Card,\n  CardContent,\n  CardHeader,\n  IconButton,\n  InputAdornment,\n  Tooltip,\n  Avatar\n} from '@mui/material';\nimport {\n  Visibility,\n  VisibilityOff,\n  Save,\n  Refresh,\n  Key,\n  Person,\n  Notifications\n} from '@mui/icons-material';\nimport axios from 'axios';\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\n\nconst Settings = () => {\n  const [userProfile, setUserProfile] = useState({\n    name: '',\n    gender: '',\n    age: '',\n    interests: [],\n    personality: [],\n    bio: ''\n  });\n  const [apiKeys, setApiKeys] = useState({\n    geminiApiKey: '',\n    instagramBusinessId: '',\n    telegramBotToken: '',\n    telegramChatId: ''\n  });\n  const [preferences, setPreferences] = useState({\n    autoExtractPreferences: true,\n    autoGenerateReplies: false,\n    sendTelegramNotifications: true,\n    enableWebhook: true,\n    maxMessagesPerProfile: 50,\n    aiTemperature: 0.7,\n    defaultTone: 'flirty'\n  });\n    const [showApiKeys, setShowApiKeys] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [saveStatus, setSaveStatus] = useState({ type: '', message: '' });\n  const [sidebarSection, setSidebarSection] = useState('profile');\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    try {\n      // Fetch user profile\n      const profileResponse = await axios.get('https://3e79a6ace678.ngrok-free.app/api/user');\n      setUserProfile(profileResponse.data);\n\n      // Fetch API keys and preferences (you'll need to create these endpoints)\n      const settingsResponse = await axios.get('https://3e79a6ace678.ngrok-free.app/api/settings');\n      if (settingsResponse.data) {\n        setApiKeys(settingsResponse.data.apiKeys || {});\n        setPreferences(settingsResponse.data.preferences || {});\n      }\n    } catch (error) {\n      console.error('Error fetching settings:', error);\n    }\n  };\n\n  const handleSaveSettings = async () => {\n    setLoading(true);\n    setSaveStatus({ type: '', message: '' });\n\n    try {\n      // Save user profile\n      await axios.put('https://3e79a6ace678.ngrok-free.app/api/user', userProfile);\n\n      // Save API keys and preferences\n      await axios.put('https://3e79a6ace678.ngrok-free.app/api/settings', {\n        apiKeys,\n        preferences\n      });\n\n      setSaveStatus({ type: 'success', message: 'Settings saved successfully!' });\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      setSaveStatus({ type: 'error', message: 'Failed to save settings. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTestApiKey = async () => {\n    if (!apiKeys.geminiApiKey) {\n      setSaveStatus({ type: 'error', message: 'Please enter your Gemini API key first.' });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await axios.post('https://3e79a6ace678.ngrok-free.app/api/test-gemini', {\n        apiKey: apiKeys.geminiApiKey\n      });\n      setSaveStatus({ type: 'success', message: 'API key is valid! Gemini connection successful.' });\n    } catch (error) {\n      setSaveStatus({ type: 'error', message: 'Invalid API key or connection failed. Please check your key.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInterestChange = (index, value) => {\n    const newInterests = [...userProfile.interests];\n    newInterests[index] = value;\n    setUserProfile({ ...userProfile, interests: newInterests });\n  };\n\n  const addInterest = () => {\n    setUserProfile({\n      ...userProfile,\n      interests: [...userProfile.interests, '']\n    });\n  };\n\n  const removeInterest = (index) => {\n    const newInterests = userProfile.interests.filter((_, i) => i !== index);\n    setUserProfile({ ...userProfile, interests: newInterests });\n  };\n\n  const handlePersonalityChange = (index, value) => {\n    const newPersonality = [...userProfile.personality];\n    newPersonality[index] = value;\n    setUserProfile({ ...userProfile, personality: newPersonality });\n  };\n\n  const addPersonality = () => {\n    setUserProfile({\n      ...userProfile,\n      personality: [...userProfile.personality, '']\n    });\n  };\n\n  const removePersonality = (index) => {\n    const newPersonality = userProfile.personality.filter((_, i) => i !== index);\n    setUserProfile({ ...userProfile, personality: newPersonality });\n  };\n\n  return (\n    <Box sx={{ minHeight: '100vh', background: 'none', fontFamily: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif', color: 'var(--text-primary)' }}>\n      {/* Header Section */}\n      <Container maxWidth=\"xl\" sx={{ pt: 4, pb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 4, gap: 3, flexWrap: 'wrap' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>\n            <Avatar sx={{ width: 56, height: 56, fontWeight: 600, fontSize: 28, bgcolor: 'var(--accent-blue)' }}>{userProfile.name?.[0] || '?'}</Avatar>\n            <Box>\n              <Typography variant=\"h3\" sx={{ fontWeight: 700, fontSize: 32, letterSpacing: '-0.025em', color: 'var(--text-primary)' }}>Settings</Typography>\n              <Breadcrumbs aria-label=\"breadcrumb\" sx={{ fontSize: 14, color: 'var(--text-secondary)' }}>\n                <span>Home</span>\n                <span>Settings</span>\n                <span sx={{ color: 'var(--accent-blue)' }}>{sidebarSection === 'profile' ? 'Profile & Account' : sidebarSection === 'integrations' ? 'Integrations & APIs' : 'Preferences & Notifications'}</span>\n              </Breadcrumbs>\n            </Box>\n          </Box>\n        </Box>\n      </Container>\n      {/* Main Layout: Sidebar + Content */}\n      <Container maxWidth=\"xl\" sx={{ display: 'flex', gap: 4, minHeight: '70vh' }}>\n        {/* Sidebar Navigation */}\n        <Box sx={{\n          width: 280,\n          flexShrink: 0,\n          bgcolor: 'rgba(255,255,255,0.95)',\n          borderRadius: 3,\n          boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)',\n          p: 3,\n          display: { xs: 'none', md: 'flex' },\n          flexDirection: 'column',\n          gap: 2,\n          height: 'fit-content',\n          mt: 2,\n        }}>\n          <Box\n            sx={{\n              display: 'flex', alignItems: 'center', gap: 2, p: 2, borderRadius: 2,\n              cursor: 'pointer',\n              bgcolor: sidebarSection === 'profile' ? 'var(--background-secondary)' : 'transparent',\n              fontWeight: sidebarSection === 'profile' ? 600 : 500,\n              color: sidebarSection === 'profile' ? 'var(--accent-blue)' : 'var(--text-secondary)',\n              transition: 'all 0.2s',\n              '&:hover': { bgcolor: 'var(--background-secondary)', color: 'var(--accent-blue)', transform: 'scale(1.02)' },\n            }}\n            onClick={() => setSidebarSection('profile')}\n          >\n            <Person fontSize=\"medium\" /> Profile & Account\n          </Box>\n          <Box\n            sx={{\n              display: 'flex', alignItems: 'center', gap: 2, p: 2, borderRadius: 2,\n              cursor: 'pointer',\n              bgcolor: sidebarSection === 'integrations' ? 'var(--background-secondary)' : 'transparent',\n              fontWeight: sidebarSection === 'integrations' ? 600 : 500,\n              color: sidebarSection === 'integrations' ? 'var(--accent-blue)' : 'var(--text-secondary)',\n              transition: 'all 0.2s',\n              '&:hover': { bgcolor: 'var(--background-secondary)', color: 'var(--accent-blue)', transform: 'scale(1.02)' },\n            }}\n            onClick={() => setSidebarSection('integrations')}\n          >\n            <Key fontSize=\"medium\" /> Integrations & APIs\n          </Box>\n          <Box\n            sx={{\n              display: 'flex', alignItems: 'center', gap: 2, p: 2, borderRadius: 2,\n              cursor: 'pointer',\n              bgcolor: sidebarSection === 'preferences' ? 'var(--background-secondary)' : 'transparent',\n              fontWeight: sidebarSection === 'preferences' ? 600 : 500,\n              color: sidebarSection === 'preferences' ? 'var(--accent-blue)' : 'var(--text-secondary)',\n              transition: 'all 0.2s',\n              '&:hover': { bgcolor: 'var(--background-secondary)', color: 'var(--accent-blue)', transform: 'scale(1.02)' },\n            }}\n            onClick={() => setSidebarSection('preferences')}\n          >\n            <Notifications fontSize=\"medium\" /> Preferences & Notifications\n          </Box>\n        </Box>\n        {/* Main Content Area */}\n        <Box sx={{ flex: 1, minWidth: 0, display: 'grid', gridTemplateColumns: '1fr', gap: 4, pb: 8 }}>\n          {/* Render sections based on sidebarSection */}\n          {sidebarSection === 'profile' && (\n            <Card sx={{ borderRadius: 3, p: 4, boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)' }}>\n              <CardHeader title=\"User Profile\" />\n              <CardContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Name\"\n                      value={userProfile.name}\n                      onChange={(e) => setUserProfile({ ...userProfile, name: e.target.value })}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Gender\"\n                      value={userProfile.gender}\n                      onChange={(e) => setUserProfile({ ...userProfile, gender: e.target.value })}\n                      placeholder=\"male/female\"\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Age\"\n                      type=\"number\"\n                      value={userProfile.age}\n                      onChange={(e) => setUserProfile({ ...userProfile, age: e.target.value })}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      multiline\n                      rows={3}\n                      label=\"Bio\"\n                      value={userProfile.bio}\n                      onChange={(e) => setUserProfile({ ...userProfile, bio: e.target.value })}\n                      placeholder=\"Tell us about yourself...\"\n                    />\n                  </Grid>\n                </Grid>\n\n                {/* Interests */}\n                {(userProfile.interests || []).map((interest, index) => (\n                  <Box key={index} sx={{ display: 'flex', gap: 1, mb: 1 }}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      value={interest}\n                      onChange={(e) => handleInterestChange(index, e.target.value)}\n                      placeholder=\"e.g., fitness, travel, music\"\n                    />\n                    <Button\n                      size=\"small\"\n                      variant=\"outlined\"\n                      color=\"error\"\n                      onClick={() => removeInterest(index)}\n                    >\n                      Remove\n                    </Button>\n                  </Box>\n                ))}\n\n                {/* Personality Traits */}\n                {(userProfile.personality || []).map((trait, index) => (\n                  <Box key={index} sx={{ display: 'flex', gap: 1, mb: 1 }}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      value={trait}\n                      onChange={(e) => handlePersonalityChange(index, e.target.value)}\n                      placeholder=\"e.g., funny, confident, adventurous\"\n                    />\n                    <Button\n                      size=\"small\"\n                      variant=\"outlined\"\n                      color=\"error\"\n                      onClick={() => removePersonality(index)}\n                    >\n                      Remove\n                    </Button>\n                  </Box>\n                ))}\n                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4 }}>\n                  <Button\n                    variant=\"contained\"\n                    size=\"large\"\n                    onClick={handleSaveSettings}\n                    disabled={loading}\n                    startIcon={<Save />}\n                  >\n                    {loading ? 'Saving...' : 'Save All Settings'}\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n          )}\n\n          {sidebarSection === 'integrations' && (\n            <Card sx={{ borderRadius: 3, p: 4, boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)' }}>\n              <CardHeader\n                title=\"API Keys & Preferences\"\n                action={\n                  <IconButton onClick={() => setShowApiKeys(!showApiKeys)}>\n                    {showApiKeys ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                }\n              />\n              <CardContent>\n                <Grid container spacing={2}>\n                  {/* Gemini API Key */}\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Gemini API Key\"\n                      type={showApiKeys ? 'text' : 'password'}\n                      value={apiKeys.geminiApiKey}\n                      onChange={(e) => setApiKeys({ ...apiKeys, geminiApiKey: e.target.value })}\n                      placeholder=\"AIzaSy...\"\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <Tooltip title=\"Test API Key\">\n                              <IconButton onClick={handleTestApiKey} disabled={loading}>\n                                <Refresh />\n                              </IconButton>\n                            </Tooltip>\n                          </InputAdornment>\n                        )\n                      }}\n                    />\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Get your API key from <a href=\"https://makersuite.google.com/app/apikey\" target=\"_blank\" rel=\"noopener\">Google AI Studio</a>\n                    </Typography>\n                  </Grid>\n\n                  {/* Instagram Business Account ID */}\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Instagram Business Account ID\"\n                      value={apiKeys.instagramBusinessId}\n                      onChange={(e) => setApiKeys({ ...apiKeys, instagramBusinessId: e.target.value })}\n                      placeholder=\"17841409306000875\"\n                    />\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Your Instagram Business Account ID for webhook integration\n                    </Typography>\n                  </Grid>\n\n\n\n                  {/* Save Button for Integrations & APIs */}\n                  <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4 }}>\n                    <Button\n                      variant=\"contained\"\n                      size=\"large\"\n                      onClick={handleSaveSettings}\n                      disabled={loading}\n                      startIcon={<Save />}\n                    >\n                      {loading ? 'Saving...' : 'Save API Settings'}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          )}\n\n          {sidebarSection === 'preferences' && (\n            <Card sx={{ borderRadius: 3, p: 4, boxShadow: '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)' }}>\n              <CardHeader title=\"Preferences & Notifications\" />\n              <CardContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom>Preferences</Typography>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={preferences.autoExtractPreferences}\n                          onChange={(e) => setPreferences({ ...preferences, autoExtractPreferences: e.target.checked })}\n                        />\n                      }\n                      label=\"Auto-extract preferences from messages\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={preferences.autoGenerateReplies}\n                          onChange={(e) => setPreferences({ ...preferences, autoGenerateReplies: e.target.checked })}\n                        />\n                      }\n                      label=\"Auto-generate AI replies\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={preferences.sendTelegramNotifications}\n                          onChange={(e) => setPreferences({ ...preferences, sendTelegramNotifications: e.target.checked })}\n                        />\n                      }\n                      label=\"Send Telegram notifications\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={preferences.enableWebhook}\n                          onChange={(e) => setPreferences({ ...preferences, enableWebhook: e.target.checked })}\n                        />\n                      }\n                      label=\"Enable Instagram webhook\"\n                    />\n                  </Grid>\n\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Max Messages per Profile\"\n                      type=\"number\"\n                      value={preferences.maxMessagesPerProfile}\n                      onChange={(e) => setPreferences({ ...preferences, maxMessagesPerProfile: parseInt(e.target.value) })}\n                    />\n                  </Grid>\n\n                  <Grid item xs={6}>\n                    <TextField\n                      fullWidth\n                      label=\"AI Temperature\"\n                      type=\"number\"\n                      inputProps={{ step: 0.1, min: 0, max: 1 }}\n                      value={preferences.aiTemperature}\n                      onChange={(e) => setPreferences({ ...preferences, aiTemperature: parseFloat(e.target.value) })}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      select\n                      label=\"Default Tone\"\n                      value={preferences.defaultTone}\n                      onChange={(e) => setPreferences({ ...preferences, defaultTone: e.target.value })}\n                    >\n                      <option value=\"flirty\">Flirty</option>\n                      <option value=\"playful\">Playful</option>\n                      <option value=\"serious\">Serious</option>\n                      <option value=\"witty\">Witty</option>\n                      <option value=\"romantic\">Romantic</option>\n                      <option value=\"casual\">Casual</option>\n                    </TextField>\n                  </Grid>\n                </Grid>\n                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4 }}>\n                  <Button\n                    variant=\"contained\"\n                    size=\"large\"\n                    onClick={handleSaveSettings}\n                    disabled={loading}\n                    startIcon={<Save />}\n                  >\n                    {loading ? 'Saving...' : 'Save All Settings'}\n                  </Button>\n                </Box>\n              </CardContent>\n            </Card>\n          )}\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Settings; "],"names":["Settings","_userProfile$name","userProfile","setUserProfile","useState","name","gender","age","interests","personality","bio","apiKeys","setApiKeys","geminiApiKey","instagramBusinessId","telegramBotToken","telegramChatId","preferences","setPreferences","autoExtractPreferences","autoGenerateReplies","sendTelegramNotifications","enableWebhook","maxMessagesPerProfile","aiTemperature","defaultTone","showApiKeys","setShowApiKeys","loading","setLoading","saveStatus","setSaveStatus","type","message","sidebarSection","setSidebarSection","useEffect","fetchSettings","async","profileResponse","axios","get","data","settingsResponse","error","console","handleSaveSettings","put","_jsxs","Box","sx","minHeight","background","fontFamily","color","children","_jsx","Container","maxWidth","pt","pb","display","alignItems","justifyContent","mb","gap","flexWrap","Avatar","width","height","fontWeight","fontSize","bgcolor","Typography","variant","letterSpacing","Breadcrumbs","flexShrink","borderRadius","boxShadow","p","xs","md","flexDirection","mt","cursor","transition","transform","onClick","Person","Key","Notifications","flex","minWidth","gridTemplateColumns","Card","CardHeader","title","CardContent","Grid","container","spacing","item","TextField","fullWidth","label","value","onChange","e","target","placeholder","multiline","rows","map","interest","index","size","handleInterestChange","newInterests","Button","filter","_","i","removeInterest","trait","handlePersonalityChange","newPersonality","removePersonality","disabled","startIcon","Save","action","IconButton","VisibilityOff","Visibility","InputProps","endAdornment","InputAdornment","position","Tooltip","post","apiKey","Refresh","href","rel","gutterBottom","FormControlLabel","control","Switch","checked","parseInt","inputProps","step","min","max","parseFloat","select"],"sourceRoot":""}